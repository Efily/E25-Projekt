{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Forside","text":""},{"location":"#selvvalgt-fordybelse","title":"Selvvalgt fordybelse","text":""},{"location":"#bluetooth-penetration-testing-projekt","title":"Bluetooth Penetration Testing Projekt","text":""},{"location":"#velkommen-til-min-hjemmeside","title":"Velkommen til min hjemmeside","text":"<p>Form\u00e5let med denne side er at dokumentere min proces og l\u00e6ring inden for penetration testing. Projektet er en del af mit valgfag p\u00e5 it-sikkerhedsuddannelsen, hvor jeg har valgt at fokusere p\u00e5 pentesting som mit hovedemne. Min fremgangsm\u00e5de Min fremgangsm\u00e5de var at l\u00e6se op p\u00e5 alle de forskellige ting samt se videoer p\u00e5 det, derefter udf\u00f8re det der var n\u00f8dvending og s\u00e5 lave produktet som jeg ville lave p\u00e5 at s\u00e6tte op kali linux p\u00e5 en raspberri pi og derefter udf\u00f8re en proof of concept og s\u00e5 putte det i en pipeline for at finde ud af hvordan man laver en CI/CD til form\u00e5l af penttesting, denne opgave kan derved ogs\u00e5 blive bygget p\u00e5 i fremtiden hvis jeg f\u00f8r lyst uden for eksammensprojektet. Indholdet p\u00e5 siden vil derfor b\u00e5de best\u00e5 af refleksioner og dokumentation af mine m\u00e5l og milep\u00e6le, som prim\u00e6rt vil give mening for mig selv og personer tilknyttet min uddannelse. Derudover vil nogle af indl\u00e6ggene kunne v\u00e6re relevante for andre, der selv er i gang med at l\u00e6re om pentesting. Her vil man kunne finde vejledninger og gennemgange af forskellige v\u00e6rkt\u00f8jer, samt l\u00f8sninger p\u00e5 de opgaver, jeg har arbejdet med \u2013 forh\u00e5bentlig til inspiration og hj\u00e6lp for andre i samme situation.</p> <p>Herunder finder du et kort overblik over, hvad de enkelte faner p\u00e5 siden indeholder:</p>"},{"location":"#malstning","title":"M\u00e5ls\u00e6tning","text":"<p>Her kan man l\u00e6se om de l\u00e6ringsm\u00e5l, jeg selv har sat, samt se en plan for specifikke m\u00e5l og milep\u00e6le i form af delm\u00e5l \u2013 alt sammen for at sikre, at projektet forl\u00f8b i den retning, jeg havde forestillet mig.</p>"},{"location":"#links","title":"Links","text":"<p>Her findes en oversigt over de links, jeg har samlet undervejs i projektet.  </p>"},{"location":"#projekt","title":"Projekt","text":"<p>Her findes mit projekt og hvordan jeg l\u00f8ste det, samt min kode, du kan ogs\u00e5 finde koden i Links til min github repo.</p>"},{"location":"#vrktjer","title":"V\u00e6rkt\u00f8jer","text":"<p>Her findes en liste over de v\u00e6rkt\u00f8jer, jeg har brugt undervejs i projektet. Jeg har noteret, hvordan de blev anvendt. Form\u00e5let er prim\u00e6rt at st\u00f8tte min egen l\u00e6ring og fungere som en slags opslagsv\u00e6rk, men det kan ogs\u00e5 v\u00e6re relevant for andre, der \u00f8nsker at l\u00e6re mere om brugen af disse v\u00e6rkt\u00f8jer.</p>"},{"location":"links/","title":"Links","text":""},{"location":"links/#linksressourceliste","title":"Links/Ressourceliste","text":""},{"location":"links/#github-repository","title":"Github Repository","text":"<p>Github med alt inkluderet kode </p>"},{"location":"links/#kali","title":"Kali","text":"<p>Kali Download Kali Dokumentation </p>"},{"location":"links/#bettercap","title":"Bettercap","text":"<p>Betercap Bettercap Installation </p>"},{"location":"links/#jenkins","title":"Jenkins","text":"<p>Jenkins Jenkins Download Jenkins Dokumentation </p>"},{"location":"links/#linux","title":"Linux","text":"<p>Linux Linux Tutorials </p>"},{"location":"links/#videoer","title":"Videoer","text":"<p>NetworkChuck - Bash Script       \ud83d\udd39 God til at l\u00e6re bash scripting hvis man ikke f\u00f8ler sig s\u00e5 st\u00e6rk i det NetworkChuck - Python       \ud83d\udd39 Har ikke brugt men hvis man ikke f\u00f8ler sig god til Python er det, det v\u00e6rd at se NetworkChuck - Linux for hackers       \ud83d\udd39 God l\u00e6ring til Linux og ikke kun til hacking men generel brug ogs\u00e5 NetworkChuck - Raspberri Pi       \ud83d\udd39 God til at l\u00e6re om raspberri pi og hvordan man s\u00e6tter den op NetworkChuck - Linux       \ud83d\udd39 St\u00f8rre linux serie som er meget i dybte g\u00e5ende derudover har den ogs\u00e5 god forklaring omkring kali som jeg bruger og WSL som vi har brugt i skolen</p>"},{"location":"links/#andet","title":"Andet","text":"<p>CVE NIST</p>"},{"location":"maalsaetning/","title":"M\u00e5ls\u00e6tning","text":""},{"location":"maalsaetning/#indhold","title":"Indhold","text":"<p>I mit projekt vil jeg gerne kigge p\u00e5 bluetooth pentesting og pipelines og hvilke v\u00e6rkt\u00f8jer g\u00f8res der brug af. Mit m\u00e5l vil v\u00e6re opdelt i tre dele:</p> <p>Opn\u00e5 en st\u00f8rre faglighed i brugen af pentesting v\u00e6rkt\u00f8jer til bluetooth Opn\u00e5 en st\u00f8rre faglighed i brugen af CI/CD Pipeline Finde frem til, hvilken v\u00e6rdi pentesting har i it-sikkerheds verdenen i dag, specielt inden for Bluetooth  </p> <p>For at \u00e5bn\u00e5 disse m\u00e5l har jeg sat op nogen l\u00e6ringsm\u00e5l til at opn\u00e5 dette samt nogen delm\u00e5l som er en god m\u00e5de at g\u00e5 fremad  </p>"},{"location":"maalsaetning/#lringsmal","title":"L\u00e6ringsm\u00e5l","text":"<p>Den studerende ops\u00e6tter selv l\u00e6ringsm\u00e5l (skabelon herunder) ud fra det valgte emne og indenfor rammerne i uddannelsens m\u00e5l for l\u00e6ringsudbytte fra den nationale studieordning kapitel 1, se: https://esdhweb.ucl.dk/D22-1980440.pdf</p> <p>Det er ikke alle l\u00e6ringsm\u00e5l der skal opfyldes, v\u00e6lg dem der passer til det valgte fordybelsesomr\u00e5de.</p> <p>L\u00e6ringsm\u00e5l skal ordnes efter viden, f\u00e6rdigheder og kompetencer  </p> <p>Viden</p> <p>Den studerende har viden om...</p> <p>Pentesting v\u00e6rkt\u00f8jer til bluetooth G\u00e6ngse metoder og fremgangsm\u00e5der hvorved pentesting udf\u00f8res G\u00e6ngse metoder og fremgangsm\u00e5der hvorved CI/CD Pipeline udf\u00f8res</p> <p>F\u00e6rdigheder</p> <p>Den studerende kan...</p> <p>Udf\u00f8re pentesting angreb Udf\u00f8re pentesting med brug af en Pipeline (CI/CD) Vurdere effektiviteten af pentesting angreb, baseret p\u00e5 tid, ressourcer og resultater Skrive en rapport baseret p\u00e5 resultaterne af en pentest</p> <p>Kompetencer</p> <p>Den studerende kan...</p> <p>h\u00e5ndtere udarbejdelsen og dokumentation af en pentest proces sammenkoble v\u00e6rkt\u00f8jer til at opn\u00e5 resultater</p>"},{"location":"maalsaetning/#delmal","title":"Delm\u00e5l","text":"<p>\ud83d\udd39 1. Research &amp; Planl\u00e6gning Forst\u00e5 Bluetooth-sikkerhed og eksisterende s\u00e5rbarheder (f.eks. BlueBorne, KNOB attack, BLE MITM-angreb). Unders\u00f8g eksisterende pentesting-v\u00e6rkt\u00f8jer som Bettercap, hcxdumptool, bluesniff, gattacker osv. Defin\u00e9r scope: Skal du teste BLE (Bluetooth Low Energy) eller klassisk Bluetooth? Skal det v\u00e6re en passiv eller aktiv test?  </p> <p>\ud83d\udd39 2. Udv\u00e6lgelse af V\u00e6rkt\u00f8jer Ops\u00e6tning  V\u00e6lg et programmeringssprog til at bygge min test suite (Python). Ops\u00e6t et milj\u00f8 til pentesting, f.eks. en Raspberry Pi eller en Kali Linux VM.333 S\u00f8rg for en Bluetooth-dongle, der underst\u00f8tter sniffing og aktiv scanning (f.eks. Ubertooth One eller en CSR 4.0 USB dongle).  </p> <p>\ud83d\udd39 3. Grundl\u00e6ggende Bluetooth Analyse Scan efter enheder i n\u00e6rheden og log MAC-adresser og enhedstyper. Pr\u00f8v at hente enhedens navn, service UUIDs og andre detaljer via hcitool eller btmon. Test for ukrypterede dataoverf\u00f8rsler ved at sniffe Bluetooth-trafik.  </p> <p>\ud83d\udd39 4. Automatisering af Pentesting Tests Byg et script til automatiseret scanning og identifikation af enheder. Implement\u00e9r kendte angreb, f.eks.: Man-in-the-Middle (MITM) angreb p\u00e5 BLE-forbindelser. Brute-force af pairing-koder (PIN cracking). Denial of Service (DoS) angreb (f.eks. overbelastning med \u201cL2CAP Echo Requests\u201d).  </p> <p>\ud83d\udd39 5. Rapportering &amp; Visualisering Lav en log-fil eller en web-GUI, der viser s\u00e5rbare enheder og testresultater. Gener\u00e9r en rapport med fundne s\u00e5rbarheder, eventuelle CVE\u2019er og anbefalinger til forbedring. </p> <p>\ud83d\udd39 6. Publicering p\u00e5 GitHub Pages Dokument\u00e9r hele processen p\u00e5 min GitHub Page. Upload kode og test-eksempler. Inklud\u00e9r en guide til at bruge test suiten.  </p>"},{"location":"pipeline/","title":"Projekt","text":""},{"location":"pipeline/#cicd-bluetooth-recon-penetration-projekt","title":"CI/CD Bluetooth Recon Penetration Projekt","text":"<p>OBS: Koden og lidt forklaring til koden kan findes i bunden af siden.  </p>"},{"location":"pipeline/#terminal-python-script","title":"Terminal Python Script","text":"<p> Efter at lave skriptet med mange fors\u00f8g for at f\u00e5 det hele til at fungere specielt med en regular expression, kan scriptet starte Bettercap og en ble recon for a kigge efter devices og deres mac addresse samt signal styrken og hvilken form for enhed det er. Som set p\u00e5 billedet over s\u00e5 kan jeg se en masse apple produkter (h\u00f8jst sansyneligt iphones) der efter vil den liste dem alle ud som den har opsnappet og s\u00e5 v\u00e6lge den med den st\u00e6rkeste signal styrke da det er h\u00f8jest success at enumerate til som den s\u00e5 vil enumerate til og derefter poste hvad information den f\u00e5r ved at \"connect\" til den. Det der er vigtigt at forst\u00e5 er at brugeren p\u00e5 den device som den connecter til VIL IKKE f\u00e5 at vide at de er blevet enumerated da det som den g\u00f8r er at sp\u00f8rge efter dens GATT profil (Generic Attribute Table), som er hvor den basically sp\u00f8rger om ALT som den device har til r\u00e5dighed. Derefter vil vi disconnect for ikke at v\u00e6kke noget suspicon og s\u00e5 f\u00e5r vi en masse information som KAN blive bruge til exploitations hvis man er en trusselakt\u00f8r, f.eks. denne telefon som vi connecter til (min mors telefon som jeg fik lov til at bruge til min fremvisning) har WRITE og NOTIFY og READ properties som tillader os at g\u00f8re nogen ting gennem bettercap som man kan passe p\u00e5 med, da vi kan write og notify til \"Apple Notification Center Service\" hvor vi kan sende falske notifikationer m\u00e5ske endda med harmlig kode hvis de trykker p\u00e5 notifikationen, som kan blive brugt med apps til at lave phishing attacks eller andet. Derudover med mac addresserne hvis en f.eks er ved at pair med en anden device kan vi lave en MITM attack. Derved at at samle disse mac addresser meget vigtigt. I mit projekt har jeg holdt mig til mere at l\u00e6re hvordan man kan bruge bettercap med CI/CD s\u00e5 jeg har ikke haft tid til at l\u00e6re hvordan jeg kunne lave en MITM attack men mere at det er muligt.   </p>"},{"location":"pipeline/#config-jenkins","title":"Config Jenkins","text":"<p> Efter at en et python script der virker s\u00e6tter vi op en jenkins pipeline og configurer det med et CI/CD script som bruger stages til at g\u00f8re ting i forskellige r\u00e6kkef\u00f8lger. I mit projekt har jeg sat op 2 stages for at fremvise hvordan det fungerer hvor at vi har et stage som k\u00f8rer koden og bruger den information som scriptet giver, og selv inde i dette script kan vi k\u00f8re kode som g\u00f8r at stagen kan k\u00f8re igen og igen indtil vi f\u00e5r hvad vi leder efter og gemmer den information som vi vil bruge hvis vi havde flere scripts til exploits vi kunne bruge den device vi har fundet til at teste for en masse kendte exploits. Og i anden stage confirmer vi at den device vi har sagt er god til at teste for exploits er gemt til fremtidig brug, dette ville betyde mere i en test suite environment for et firma som gerne ville pent teste deres devices eller hobby cybersikkerhed arbejdere som er intereseret i at teste deres egne devices. (Bettercap can bruge b\u00e5de bluetooth og wifi og mere).</p>"},{"location":"pipeline/#pipeline-recon","title":"Pipeline Recon","text":"<p> Efter at s\u00e6tte op vores jenkins script k\u00f8rer vi builded hvor den vil f\u00f8rst kigge om vi har en eksisterende mac addresse vi vil bruge for at skippe denne stage, men da vi ikke har vil den starte python scriptet med at s\u00f8ge efter devices som set p\u00e5 billedet over.</p>"},{"location":"pipeline/#pipeline-mac-found","title":"Pipeline Mac Found","text":"<p> I billedet over opfanger den s\u00e5 de mac addresser som vi leder efter og den fanger derved alle og derefter v\u00e6lger den med den st\u00e6rkeste styrke.</p>"},{"location":"pipeline/#pipeline-enum","title":"Pipeline Enum","text":"<p>  Derefter at enumarate og vi f\u00e5r success ser vi det samme som i python scriptet som er en god til at vi kan se at scriptet fungere i vores ci/cd pipeline</p>"},{"location":"pipeline/#pipeline-sucess","title":"Pipeline Sucess","text":"<p> Derefter vil den give os et input requirement i vores pipeline script til at sp\u00f8rge om vi er sikker p\u00e5 at vi vil bruge denne device, hvis ja vil den blive gemt hvis ikke vil den pr\u00f8ve at k\u00f8rer scriptet igen for at fange en anden device ellers kan vi ogs\u00e5 bare abandon builded, i dette tilf\u00e6lde siger vi ja hvor den s\u00e5 slutter det f\u00f8rste stage og starter den anden stage som bare printer ud den mac addresse som vi har sagt er vores som beviser at vi har gemt og kan bruge den til flere exploitive scripts og fors\u00f8g helle i en CI/CD pipeline environment for pent testing.</p>"},{"location":"pipeline/#bettercap-python-kode","title":"Bettercap Python Kode","text":"<p> Github Repo link til koden \ud83d\udd39pexpect bruges til at starte og styre eksterne programmer (som fx bettercap) automatisk som om du selv skrev i terminalen. \ud83d\udd39re er til regul\u00e6re udtryk, s\u00e5 vi kan s\u00f8ge efter bestemte tekstm\u00f8nstre, f.eks. MAC-adresser og signalstyrker. \ud83d\udd39time bruges bare til at lave pauser (sleep), s\u00e5 vi giver tid til, at programmer n\u00e5r at levere output.  </p> <p>Funktion: parse_bettercap_output(output) \ud83d\udd39Denne funktion tager tekst-output fra bettercap og fors\u00f8ger at finde MAC-adresser og deres dBm (signalstyrke). \ud83d\udd39Den printer f\u00f8rst outputtet, s\u00e5 vi kan se, hvad der faktisk bliver fors\u00f8gt parset. Derefter defineres en regex der leder efter: \ud83d\udd39En MAC-adresse (f.eks. AA:BB:CC:DD:EE:FF) \ud83d\udd39Noget \"l\u00f8st tekst\" \ud83d\udd39En dBm-v\u00e6rdi (f.eks. -65 dBm) For hvert match: \ud83d\udd39MAC-adressen og dBm signalstyrken hives ud. \ud83d\udd39dBm-v\u00e6rdien konverteres fra tekst til et heltal (fordi vi vil kunne sammenligne dem numerisk). \ud83d\udd39Alle fundne enheder gemmes i en liste som (mac, dBm). Til sidst v\u00e6lges den MAC med st\u00e6rkest signal (t\u00e6ttest p\u00e5 0), dvs. h\u00f8jeste dBm-v\u00e6rdi. </p> <p>Funktion: read_all_output(child) \ud83d\udd39Denne funktion fors\u00f8ger at l\u00e6se alt output fra bettercap processen. \ud83d\udd39Den bliver ved at l\u00e6se sm\u00e5 bidder indtil der ikke kommer mere output. \ud83d\udd39Hvis der sker timeout eller processens output lukker (EOF), s\u00e5 stopper den og returnerer det samlede output.  </p> <p>Funktion: start_bettercap() \ud83d\udd39Starter en ny bettercap-proces som root (sudo bettercap) med pexpect. \ud83d\udd39Venter 3 sekunder p\u00e5 at programmet starter op. \ud83d\udd39Sender kommandoen ble.recon on, hvilket starter scanning af Bluetooth Low Energy (BLE) enheder. \ud83d\udd39Venter 20 sekunder for at samle data. \ud83d\udd39Bruger read_all_output til at hive alt output fra processen. Hvis der blev fundet noget: \ud83d\udd39Parser outputtet med parse_bettercap_output. \ud83d\udd39Hvis der blev fundet en st\u00e6rk MAC-adresse: \ud83d\udd39K\u00f8rer en ble.enum {MAC} kommando for at hente flere detaljer om den specifikke enhed. \ud83d\udd39Venter igen 20 sekunder og l\u00e6ser alt nyt output. Hvis der trykkes Ctrl+C (KeyboardInterrupt), s\u00e5 sender den exit til bettercap og lukker processen p\u00e6nt. \ud83d\udd39Ved fejl fanges det og printes. \ud83d\udd39N\u00e5r scriptet er f\u00e6rdigt, fort\u00e6ller det om der blev fundet en MAC-adresse eller ej.  </p>"},{"location":"pipeline/#jenkins-groovy-kode","title":"Jenkins Groovy Kode","text":"<p> Github Repo link til koden pipeline beskriver hele Jenkins job'et. \ud83d\udd39agent any betyder, at den kan k\u00f8re p\u00e5 hvilken som helst tilg\u00e6ngelig agent (node). \ud83d\udd39stages indeholder trinnene for hvad der skal ske. \ud83d\udd39post beskriver hvad der altid skal g\u00f8res efter builden (her: gemme artefakter).  </p> <p>Stage: 'Execute Python Script' \ud83d\udd39ansiColor('xterm') bruges for at farverne i Jenkins Console Output bliver p\u00e6ne. \ud83d\udd39script { ... } g\u00f8r, at man kan skrive almindelig Groovy kode. Inde i script: \ud83d\udd39Starter med at s\u00e6tte to boolean flags: confirmed og reuseMac, som bruges til styring af flowet. \ud83d\udd39Tjek for eksisterende MAC adresse: \ud83d\udd39Ser om mac_address.txt filen findes og har indhold. \ud83d\udd39Hvis ja, sp\u00f8rger brugeren via Jenkins GUI om de vil genbruge den eksisterende MAC adresse. \ud83d\udd39Hvis brugeren siger ja (REUSE bliver true), s\u00e6tter vi confirmed = true, s\u00e5 vi springer over at k\u00f8re scriptet igen. Hvis ikke bekr\u00e6ftet: k\u00f8r en loop: \ud83d\udd39Printer besked om at Python script k\u00f8res. \ud83d\udd39K\u00f8rer Python scriptet (bettercap.py) og gemmer alt output i script_output.txt. \ud83d\udd39Tr\u00e6kker sidste linje ud fra script_output.txt (forventer det er MAC-adressen) og gemmer i mac_address.txt. \ud83d\udd39L\u00e6ser den nye MAC-adresse og viser den i konsollen. \ud83d\udd39Sp\u00f8rger brugeren igen via input i GUI, om den fundne MAC-adresse er godkendt. \ud83d\udd39Hvis ikke godkendt (CONFIRM == false), s\u00e5 k\u00f8rer scriptet forfra i loopen. \ud83d\udd39Dette loop forts\u00e6tter indtil brugeren accepterer en MAC-adresse.  </p> <p>Stage: 'Read and Print MAC Address' \ud83d\udd39Simpelt trin. \ud83d\udd39L\u00e6ser mac_address.txt igen. \ud83d\udd39Hvis filen indeholder noget: printer MAC-adressen. \ud83d\udd39Hvis filen er tom: printer besked om det.  </p> <p>Post: always \ud83d\udd39Efter alle stages (uanset om det fejler eller lykkes), arkiveres mac_address.txt som en artefakt. \ud83d\udd39S\u00e5 kan man hente filen senere fra Jenkins UI.  </p>"},{"location":"pipeline/#samlet-flow-visualisering","title":"Samlet Flow Visualisering","text":"<p>Start pipeline     |     v Tjek om der findes en MAC-adresse fra f\u00f8r     |     +--&gt; Ja: Sp\u00f8rg om vi vil genbruge den     |     v Hvis ikke genbruge -&gt; Loop:   \ud83d\udd39 K\u00f8r Python script   \ud83d\udd39 Gem ny MAC   \ud83d\udd39 Sp\u00f8rg om MAC er ok   \ud83d\udd39 Hvis nej, gentag   \ud83d\udd39 Hvis ja, forts\u00e6t     |     v L\u00e6s og print MAC-adresse     |     v Arkiver mac_address.txt  </p>"},{"location":"tools/","title":"V\u00e6rkt\u00f8jer","text":""},{"location":"tools/#vrktjer-som-jeg-har-brugt","title":"V\u00e6rkt\u00f8jer som jeg har brugt","text":""},{"location":"tools/#raspberripi-5-model-b-11","title":"RaspberriPi 5 Model B 1.1","text":"<p>RaspberriPi er blevet brugt til projektet da det er nemt at b\u00e6re rundt p\u00e5 da jeg har brugt den b\u00e5de ved min lejlighed og mine for\u00e6ldre samt den er udstyrret med alt n\u00f8dvendigt grej s\u00e5som bluetooth (BLE).  </p>"},{"location":"tools/#kali-linux","title":"Kali Linux","text":"<p>Kali Linux er mit valgte OS da den er perfekt for cybersikkerhed og er tit downloaded med alle de v\u00e6rkt\u00f8jer man tit bruger, derudover da den er bygget p\u00e5 ubuntu er den god da den underst\u00f8tter stortset alt ubunt g\u00f8r, og den kom pre-installed med Bettercap og en nem GUI at bruge.</p>"},{"location":"tools/#bettercap","title":"Bettercap","text":"<p>Bettercap er et kraftfuldt hacking- og overv\u00e5gningsv\u00e6rkt\u00f8j. Det bruges til at man-in-the-middle (MITM) angreb, fange data, manipulere netv\u00e6rkstrafik, sniffe adgangskoder, spoofe enheder, angribe Bluetooth, angribe Wi-Fi og meget mere. Det kan t\u00e6nkes lidt som en \"Swiss Army Knife\" eller Jack of all trades for netv\u00e6rkshacking. </p> <p>I mit tilf\u00e6lde har jeg brugt:</p> <p>ble.recon: Bruges til at opdage Bluetooth-enheder omkring dig, f\u00f8r du angriber eller efterligner dem.  </p> <p>ble.enum: Bruges til at kortl\u00e6gge enhedens funktioner (fx \"kan vi sende data til den?\" eller \"kan vi modtage fake notifikationer?\").  </p> <p>Derudover hvis jeg havde mere tid til flere scripts ville der kunne blive brugt: </p> <p>ble.write: Bruges til at skrive data til en Bluetooth Low Energy (BLE) enhed, kan f.eks. sende kommandoer, \u00e6ndre indstillinger, eller snyde enheden til at g\u00f8re noget.</p> <p>arp.spoof: Bruges til at aflytte eller \u00e6ndre trafik p\u00e5 et LAN/WiFi netv\u00e6rk.  </p> <p>arp.ban: Bruges til at smide folk offline (DoS - Denial of Service).</p>"},{"location":"tools/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<p>Jenkins Pipeline er mit valgte CI/CD program og kan k\u00f8re scripts og kommandoer automatisk efter mit valg. CI/CD (Continous Intergration og Continuous Delivery/Deployment), g\u00f8r at hver gang man trykker 'save' p\u00e5 sin kode, kan det automatisk blive testet og pipeline g\u00f8r at man kan have en ci/cd som kan g\u00f8re flere ting en efter en anden automatisk.</p> <p> I starten n\u00e5r vi starter vores jenkins skal vi bruge en secret admin kode til at logge ind for at lave en bruger f\u00f8rste gang som den gemmer i en gemt fil p\u00e5 den pc man har sat jenkins op p\u00e5. Derudover vil den ogs\u00e5 sige at vores Jenkins k\u00f8rer p\u00e5 port 8080 s\u00e5 vi kan g\u00e5 ind p\u00e5 en browser og s\u00e6tte i linket \"localhost:8080\"</p> <p> Efter at have logget ind v\u00e6lger man hvilke plugins den skal downloade og valgte bare at downloade de n\u00f8dvendige.</p> <p> Derefter er vi p\u00e5 Dashboarded hvor vi kan s\u00e5 lave en ny item</p> <p> Derefter v\u00e6lger vi en pipeline og s\u00e6tter den op og configurere med den kode vi vil lave bagefter som set i Projektet. Jenkins Pipeline bruger et andet kodningsprog og har under projektet skulle l\u00e6re om Groovy Syntax som er det sprog som de bruger som er baseret p\u00e5 sproget Java. Scripts som der bliver k\u00f8rt gennem jenkins scriptet (groovy scriptet) er python scriptet og var derfor ikke s\u00e5 sv\u00e6rt i forhold til alt den tid jeg skulle bruge til at l\u00e6re et nyt sprog.  </p>"}]}